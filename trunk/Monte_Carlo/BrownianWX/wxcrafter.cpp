//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainDialogBaseClass::MainDialogBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* MainSizer = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(MainSizer);
    
    wxFlexGridSizer* flexGridSizer = new wxFlexGridSizer(2, 2, 0, 0);
    flexGridSizer->SetFlexibleDirection( wxBOTH );
    flexGridSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer->AddGrowableCol(0);
    flexGridSizer->AddGrowableCol(1);
    flexGridSizer->AddGrowableCol(2);
    flexGridSizer->AddGrowableRow(0);
    flexGridSizer->AddGrowableRow(1);
    flexGridSizer->AddGrowableRow(2);
    
    MainSizer->Add(flexGridSizer, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizerContents = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer->Add(boxSizerContents, 1, wxALL|wxEXPAND, 5);
    
    m_textReport = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    
    boxSizerContents->Add(m_textReport, 0, wxALL|wxEXPAND|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    m_textReport->SetMinSize(wxSize(360,240));
    
    m_gaugeCalculation = new wxGauge(this, wxID_ANY, 100, wxDefaultPosition, wxSize(-1,-1), wxGA_HORIZONTAL);
    m_gaugeCalculation->SetValue(10);
    
    boxSizerContents->Add(m_gaugeCalculation, 0, wxALL|wxEXPAND|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    m_gaugeCalculation->SetMinSize(wxSize(360,20));
    
    wxBoxSizer* boxSizerButtons = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer->Add(boxSizerButtons, 1, wxALL|wxEXPAND, 5);
    
    m_buttonRunSim = new wxButton(this, wxID_ANY, _("Run!!"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerButtons->Add(m_buttonRunSim, 0, wxALL|wxALIGN_RIGHT, 5);
    
    m_buttonSettings = new wxButton(this, wxID_ANY, _("Settings"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerButtons->Add(m_buttonSettings, 0, wxALL|wxALIGN_RIGHT, 5);
    
    m_buttonSave = new wxButton(this, wxID_ANY, _("Save"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerButtons->Add(m_buttonSave, 0, wxALL|wxALIGN_RIGHT, 5);
    
    m_buttonExit = new wxButton(this, wxID_ANY, _("Exit"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizerButtons->Add(m_buttonExit, 0, wxALL|wxALIGN_RIGHT|wxALIGN_BOTTOM, 5);
    
    SetMinSize( wxSize(500,330) );
    SetSizeHints(500,330);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(MainDialogBaseClass::OnInitMainDialog), NULL, this);
    m_buttonRunSim->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnRunClicked), NULL, this);
    m_buttonSettings->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnSettingsClicked), NULL, this);
    m_buttonSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnSaveClicked), NULL, this);
    m_buttonExit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnExitClicked), NULL, this);
    
}

MainDialogBaseClass::~MainDialogBaseClass()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(MainDialogBaseClass::OnInitMainDialog), NULL, this);
    m_buttonRunSim->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnRunClicked), NULL, this);
    m_buttonSettings->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnSettingsClicked), NULL, this);
    m_buttonSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnSaveClicked), NULL, this);
    m_buttonExit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainDialogBaseClass::OnBtnExitClicked), NULL, this);
    
}
